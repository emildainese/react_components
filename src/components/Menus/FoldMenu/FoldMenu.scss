@import'../../../index.scss';

$numItems :5;
$itemHeight:50;

@mixin setEnterPosition($numItems, $height) {
  @for $i from 1 through $numItems {
    &.slide-in-enter-done:nth-child(#{$i}) {
      transform: translateY(calc(#{$i} * #{$height}px));
      transition: transform calc(#{$i} * .1s);
      z-index: -#{$i};
    }
  }
}

.fold-menu {
  max-width: 200px;
  width: 100%;
  max-height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  color: white;
  z-index: 100;
  box-sizing: border-box;

  .menu {
    width: 50px;
    height: 50px;
    position: relative;
    background-color: black;
    transition: 0.3s ease-out;

    span {
      font-size: 1.5em;
      text-transform: uppercase;
      font-weight: bold;
      line-height: 50px;
      padding-left: 20px;
      display: none;
    }

    .bars {
      position: absolute;
      width: 50px;
      height: 50px;
      top: 0;
      right: 0;

      label {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        text-align: center;
        line-height: 50px;
        font-size: 1.6em;
        cursor: pointer;

        &.fa.fa-times {
          display: none;
        }
      }
    }
  }

  ul {
    display: none;
    position: relative;
    width: 100%;
    width: 0;
    animation: expand .3s linear forwards;

    li {
      background-color: #222;
      list-style: none;
      cursor: pointer;
      position: absolute;
      top: -50px;
      left: 0px;
      z-index: -1;
      width: 0;
      animation: expand .3s linear forwards;
      border-bottom: 1px solid #444;

      @include setEnterPosition($numItems, $itemHeight);

      button,
      a {
        text-decoration: none;
        border: none;
        outline: none;
        display: inline-block;
        background-color: #222;
        color: white;
        text-transform: uppercase;
        transition: background-color 0.5s ease-out;
        height: 50px;
        width: 0;
        padding: 0.5rem 1rem;
        animation: expand .3s linear forwards;

        &:hover {
          background-color: $color-theme;
        }
      }
    }
  }
}

// The general sibling combinator (~) separates two selectors and matches the second element only if it follows the first element (though not necessarily immediately), and both are children of the same parent element.
#chk1 {
  display: none;
}

#chk1:checked~.menu {
  width: 200px;
}

#chk1:checked~ul {
  display: block;
}

#chk1:checked~.menu .fa.fa-times,
#chk1:checked~.menu span {
  display: block;
}

#chk1:checked~.menu .fas.fa-cogs {
  display: none;
}


@keyframes expand {
  0% {
    width: 0;
  }

  100% {
    width: 200px;
  }
}